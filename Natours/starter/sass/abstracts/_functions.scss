/// Function helper to strip a single character from a string; by default, simply removes the character.
/// @access private
/// @param {String} $string - The string to alter.
/// @param {String} $to-replace - The character to check for.
/// @param {String} $replacement [''] - The character to replace the removed character with.
/// @example scss - Usage {
///   .foo:after {
///     content: str-replace('Hello.', '.', '!');
///   }
/// @example css - Result
///   .foo:after {
///     content: 'Hello!'
///   }
@function str-replace($string, $to-replace, $replacement:'') {
  $target-location: str-index($string, $to-replace);

  @if $target-location==null {
    @return $string;
  }

  $string-without-target: str-slice($string, 1, $target-location - 1)+str-slice($string, $target-location + 1);
  $string: str-insert($string-without-target, $replacement, $target-location);
  @return $string;
}

/// Generates the color black, with, optionally, a set opacity.
/// @access public
/// @param {Float} $opacity - Opacity
/// @example scss - Usage
///   .foo {
///     border-color: black(0.1);
///   }
/// @example css - Result
///   .foo {
///     border-color: rgba(0, 0, 0, 0.1);
///   }
@function black($opacity) {
  @return rgba(0, 0, 0, $opacity);
}

/// Generates the color white, with, optionally, a set opacity.
/// @access public
/// @param {Float} $opacity - Opacity
/// @example scss - Usage
///   .foo {
///     border-color: white(0.1);
///   }
/// @example css - Result
///   .foo {
///     border-color: rgba(255, 255, 255, 0.1);
///   }
@function white($opacity) {
  @return rgba(255, 255, 255, $opacity);
}

/// A Long-shadow mixin, guaranteed to make your Dribbble shots 11% cooler
/// @param {String}  $color_a  The darkest colour (closest the object)
/// @param {String}  $color_b  The lightest colour (often the background colour)
/// @param {Number}  $stepnum  Number of steps
/// @param {Number}  $opacity  The opacity of the blend
/// @return {List}             Returns a list ready to drop into 'box-shadow' or text-shadow
@function longshadow($color_a, $color_b, $stepnum, $opacity: 1) {
  $gradient_steps: null;

  @for $i from 1 through $stepnum {
    $weight: (($i - 1) / $stepnum) * 100;
    $colour_mix: mix($color_b, rgba($color_a, $opacity), $weight);
    $seperator: null;

    @if($i !=$stepnum) {
      $seperator: #{','};
    }

    $gradient_steps: append(#{$gradient_steps}, #{$i}px #{$i}px $colour_mix $seperator);
  }

  @return $gradient_steps;

}

// @function linear-gradient($angle, $details...) {
//   $legacy-syntax: $use-legacy-gradient-syntax;

//   @if type-of($angle) !="number" {
//     $angle: compact($angle);
//     $legacy-syntax: if(index($angle, "to"), false, true);
//   }

//   @if $legacy-syntax {
//     @return _linear-gradient_legacy($angle, $details...);
//   }

//   @else {
//     @return _linear-gradient($angle, $details...);
//   }
// }

/// Convert any CSS <length> or <percentage> value to any another.
/// @param {String, Number} $length - A css <length> or <percentage> value
/// @param {String} $to-unit - String matching a css unit keyword, e.g. 'em', '%', etc.
/// @param $from-context - When converting from relative units, the absolute length (in px) to
///   which $length refers (e.g. for $lengths in em units, would normally be the
///   font-size of the current element).
/// @param $to-context - For converting to relative units, the absolute length in px to which the
///   output value will refer. Defaults to the same as $from-context, since it is
///   rarely needed.
@function convert-length($length,
  $to-unit,
  $from-context: $base-font-size,
  $to-context: $from-context) {

  $from-unit: unit($length);

  // Optimize for cases where `from` and `to` units are accidentally the same.
  @if $from-unit==$to-unit {
    @return $length;
  }

  // Context values must be in px so we can determine a conversion ratio for
  // relative units.
  @if unit($from-context) !='px' {
    @warn "Paremeter $from-context must resolve to a value in pixel units.";
  }

  @if unit($to-context) !='px' {
    @warn "Parameter $to-context must resolve to a value in pixel units.";
  }

  // Convert input length to pixels
  $px-length: $length;

  @if $from-unit !='px' {

    // Convert relative units using the from-context parameter.
    @if $from-unit=='em' {
      $px-length: $length * $from-context / 1em
    }

    @else if $from-unit=='rem' {
      $px-length: $length * $base-font-size / 1rem
    }

    @else if $from-unit=='%' {
      $px-length: $length * $from-context / 100%
    }

    @else if $from-unit=='ex' {
      $px-length: $length * $from-context / 2ex
    }

    // Convert absolute units using Sass' conversion table.
    // cSpell: Disable
    @else if $from-unit=='in'or $from-unit=='mm'or $from-unit=='cm'or $from-unit=='pt'or $from-unit=='pc' {
      $px-length: 0px + $length
    }

    // Certain units can't be converted.
    @else if $from-unit=='ch'or $from-unit=='vw'or $from-unit=='vh'or $from-unit=='vmin' {
      @warn "#{$from-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }

    @else {
      @warn "#{$from-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }

  // Convert length in pixels to the output unit
  $output-length: $px-length;

  @if $to-unit !='px' {

    // Relative units
    @if $to-unit=='em' {
      $output-length: $px-length * 1em / $to-context
    }

    @else if $to-unit=='rem' {
      $output-length: $px-length * 1rem / $base-font-size
    }

    @else if $to-unit=='%' {
      $output-length: $px-length * 100% / $to-context
    }

    @else if $to-unit=='ex' {
      $output-length: $px-length * 2ex / $to-context
    }

    // Absolute units
    @else if $to-unit=='in' {
      $output-length: 0in + $px-length
    }

    @else if $to-unit=='mm' {
      $output-length: 0mm + $px-length
    }

    @else if $to-unit=='cm' {
      $output-length: 0cm + $px-length
    }

    @else if $to-unit=='pt' {
      $output-length: 0pt + $px-length
    }

    @else if $to-unit=='pc' {
      $output-length: 0pc + $px-length
    }

    // Non-convertible units
    @else if $to-unit=='ch'or $to-unit=='vw'or $to-unit=='vh'or $to-unit=='vmin' {
      @warn "#{$to-unit} units can't be reliably converted; Returning original value.";
      @return $length;
    }

    @else {
      @warn "#{$to-unit} is an unknown length unit. Returning original value.";
      @return $length;
    }
  }

  @return $output-length;
}

// cSpell: Enable

// @private Get the px/rem versions of a value.
@function rem-fallback-values($value) {
  $_return: (px: $value,
      rem: $value,
    );

  @if type-of($value)==number and not unitless($value) {
    @if unit($value)==rem {
      $_return: map-merge($_return, (px: round(convert-length($value, px)),
          ));
    }

    @else if unit($value)==px {
      $_return: map-merge($_return, (px: round($value),
            rem: convert-length($value, rem),
          ));
    }
  }

  @return $_return;
}

// @private Get the px/rem versions of a list (or nested lists).
@function list-convert-rems($value) {
  $_empty: (px: (),
      rem: (),
    );
  $_return: $_empty;
  $_sep: null;

  @if type-of($value)==list {
    $_sep: list-separator($value);

    @each $sub in $value {
      $_this: list-convert-rems($sub);
      $_return: (px: append(map-get($_return, px), map-get($_this, px), $_sep),
          rem: append(map-get($_return, rem), map-get($_this, rem), $_sep),
        );
    }
  }

  @else {
    $_this: rem-fallback-values($value);
    $_return: map-merge($_return, $_this);
  }

  @return $_return;
}